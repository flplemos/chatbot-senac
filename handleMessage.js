const { uploadImagem } = require("./drive");

const fluxos = require("./fluxos");
const salvarChamado = require("./salvarChamado");
const agenda = require("./agendaSuporte");
const { valImagem } = require("./validacoes");

const delay = (ms) => new Promise((res) => setTimeout(res, ms));

const ID_GRUPO_SUPORTE = process.env.ID_GRUPO_SUPORTE;

function dentroDoHorario() {
  const agora = new Date();
  const dia = agora.getDay();
  const hora = agora.getHours();
  const diaUtil = dia >= 1 && dia <= 5;
  const horarioUtil = hora >= 8 && hora < 21;
  return diaUtil && horarioUtil;
}

// MODIFICA√á√ÉO AQUI: Renomeada e alterada para retornar um array de atendentes
function getAtendentesDaVez() {
  const agora = new Date();
  const diaAtual = agora.getDay();
  const horaAtual = agora.getHours();
  const plantonistasAtivos = agenda.filter(
    (turno) =>
      turno.dia === diaAtual &&
      horaAtual >= turno.horaInicio &&
      horaAtual < turno.horaFim
  );
  return plantonistasAtivos; // Retorna um array de objetos de atendente
}

async function handleMessage(msg, client, usersData, chatsCongelados) {
  const chatId = msg.from;

  if (msg.from === ID_GRUPO_SUPORTE) {
    if (msg.body.toLowerCase().startsWith("!liberarbot ")) {
      const partes = msg.body.split(" ");
      const numeroAlvo = partes[1] ? partes[1].trim() : null;

      if (!numeroAlvo) {
        return await client.sendMessage(
          ID_GRUPO_SUPORTE,
          "‚ö†Ô∏è Formato incorreto. Use: !liberarbot <numero_do_usuario>"
        );
      }
      const chatIdAlvo = `${numeroAlvo}@c.us`;

      if (chatsCongelados.has(chatIdAlvo)) {
        chatsCongelados.delete(chatIdAlvo);
        await client.sendMessage(
          ID_GRUPO_SUPORTE,
          `‚úÖ Bot liberado para o usu√°rio ${numeroAlvo}.`
        );
      } else {
        console.log(`Falha ao liberar. ID buscado: ${chatIdAlvo}`);
        console.log("IDs congelados no momento:", Array.from(chatsCongelados));
        await client.sendMessage(
          ID_GRUPO_SUPORTE,
          `‚ö†Ô∏è O bot j√° estava ativo para o usu√°rio ${numeroAlvo}.`
        );
      }
      return;
    }

    if (msg.body.toLowerCase().startsWith("!congelarbot ")) {
      const numeroAlvo = msg.body.split(" ")[1];
      if (!numeroAlvo) {
        return await client.sendMessage(
          ID_GRUPO_SUPORTE,
          "‚ö†Ô∏è Formato incorreto. Use: !congelarbot <numero_do_usuario>"
        );
      }
      const chatIdAlvo = `${numeroAlvo}@c.us`;

      if (chatsCongelados.has(chatIdAlvo)) {
        await client.sendMessage(
          ID_GRUPO_SUPORTE,
          `‚ö†Ô∏è O bot j√° estava congelado para o usu√°rio ${numeroAlvo}.`
        );
      } else {
        chatsCongelados.add(chatIdAlvo);
        await client.sendMessage(
          ID_GRUPO_SUPORTE,
          `‚úÖ Bot congelado para o usu√°rio ${numeroAlvo}. O bot n√£o responder√° mais a este usu√°rio at√© ser liberado.`
        );
      }
      return;
    }

    return;
  }

  if (chatsCongelados.has(chatId)) {
    return;
  }

  if (usersData[chatId]) {
    const user = usersData[chatId];
    const passos = fluxos[user.opcao];
    const passoAtual = user.step;

    // =================================================================
    //  CORRE√á√ÉO APLICADA AQUI
    //  Verifica se o fluxo j√° terminou ANTES de tentar validar.
    // =================================================================
    if (passoAtual >= passos.length) {
      // Se por algum motivo a fun√ß√£o for chamada para um passo que n√£o existe,
      // apenas limpa o estado do usu√°rio e encerra.
      delete usersData[chatId];
      return;
    }

    let valido = false;
    if ((user.opcao === "1" || user.opcao === "2") && passoAtual === 4) {
      valido = valImagem(msg);
    } else {
      valido = passos[passoAtual].valida(msg.body || "");
    }

    if (!valido) {
      await client.sendMessage(
        chatId,
        `Entrada inv√°lida! ${passos[passoAtual].pergunta}`
      );
      return;
    }

    if ((user.opcao === "1" || user.opcao === "2") && passoAtual === 4) {
      const media = await msg.downloadMedia();
      const fileName = `${chatId}_${Date.now()}.jpeg`;
      const imageUrl = await uploadImagem(media.data, media.mimetype, fileName);
      user.respostas[passoAtual] = imageUrl;
    } else {
      user.respostas[passoAtual] = msg.body.trim();
    }

    user.step++;
    if (user.step >= passos.length) {
      await client.sendMessage(
        chatId,
        'Obrigado! Seu chamado foi registrado. Aguarde nosso contato.\n\nPara retornar ao menu digite: "Menu"'
      );
      await salvarChamado(user.opcao, user.respostas, chatId, client);
      delete usersData[chatId];
      return;
    }
    await client.sendMessage(chatId, passos[user.step].pergunta);
    return;
  }

  if (
    msg.body.match(/(menu|Menu|oi|Oi|Ol√°|ol√°|boa|Boa)/i) &&
    msg.from.endsWith("@c.us")
  ) {
    const chat = await msg.getChat();
    await delay(3000);
    await chat.sendStateTyping();
    await delay(3000);
    const contact = await msg.getContact();
    const name = contact.pushname || "Usu√°rio";
    await client.sendMessage(
      msg.from,
      `Ol√°! ${name.split(" ")[0]
      } Sou o assistente virtual do Senac-RN EduTech! Como posso ajud√°-lo hoje? Por favor, digite uma das op√ß√µes abaixo:\n\n` +
      `1 - Recupera√ß√£o de acesso a conta Microsoft\n` +
      `2 - Problemas com Microsoft Authenticator\n` +
      `3 - Consultar meu e-mail institucional\n` +
      `4 - Problema no portal do aluno\n` +
      `5 - D√∫vidas sobre cursos e matr√≠culas\n` +
      `6 - Outros\n`
    );
    await chat.sendStateTyping();
    await delay(3000);
    await client.sendMessage(
      msg.from,
      `Ap√≥s o envio da mensagem, aguarde. N√£o reenvie mensagens ou realize liga√ß√µes, pois alteram a sua vez na fila de espera.\n` +
      `Informamos que o Senac-RN preserva seus dados pessoais de forma segura e transparente, baseado na nova Lei n¬∞13.709/2018 LGPD (Lei Geral de Prote√ß√£o de Dados).`
    );
    return;
  }

  if (
    ["1", "2", "3", "4", "5", "6"].includes(msg.body) &&
    msg.from.endsWith("@c.us")
  ) {
    const opcao = msg.body;

    if (opcao === "3" || opcao === "5") {
      if (opcao === "3") {
        await client.sendMessage(
          chatId,
          "Para consultar seu e-mail institucional, acesse o link abaixo e informe seu CPF:\n\nüîó https://salavirtual.rn.senac.br/\n\nL√° voc√™ ver√° qual √© seu e-mail institucional."
        );
      }
      if (opcao === "5") {
        await client.sendMessage(
          chatId,
          "Informa√ß√µes sobre matr√≠culas e cursos do SENAC-RN voc√™ pode entrar em contato com a central de atendimento: (84) 4005-1000 ou pelo site: üîó https://www.rn.senac.br/todos-os-cursos"
        );
      }
      await delay(3000);
      await client.sendMessage(
        msg.from,
        'Para retornar ao Menu digite: "menu"'
      );
      return;
    }

    if (opcao === "6") {
      if (dentroDoHorario()) {
        const atendentesAtivos = getAtendentesDaVez(); // Busca todos os atendentes ativos

        // AQUI: A condi√ß√£o deve verificar se h√° atendentes ativos no array
        if (atendentesAtivos.length > 0) {
          const contatoUsuario = await msg.getContact();
          const nomeUsuario = contatoUsuario.pushname || msg.from;
          const numeroUsuario = msg.from.replace("@c.us", "");

          // AQUI: Declarando 'mentions' e 'nomesAtendentes' antes de us√°-los
          const mentions = atendentesAtivos.map(a => a.id); // Constr√≥i array de IDs para men√ß√£o
          const nomesAtendentes = atendentesAtivos.map(a => `*${a.atendente}* (@${a.id.replace("@c.us", "")})`).join(' e '); // Constr√≥i string de nomes

          const msgParaGrupo =
            `*Novo chamado para atendimento humano!*\n\n` +
            `*Solicitante:* ${nomeUsuario}\n` +
            `*Contato:* ${numeroUsuario}\n\n` +
            `Aten√ß√£o, ${nomesAtendentes}! Por favor, assumam o atendimento.\n\n` +
            `*‚ÄºÔ∏è Bot nesta conversa est√° congelado.*\n\n` +
            `üßä Para liberar depois, envie: *!liberarbot ${numeroUsuario}*`;

          await client.sendMessage(ID_GRUPO_SUPORTE, msgParaGrupo, {
            mentions: mentions, // Passa o array de IDs para men√ß√£o
          });

          chatsCongelados.add(chatId);

          // Personaliza a resposta ao usu√°rio com base no n√∫mero de atendentes
          let responseToUser = `Certo! Notifiquei `;
          if (atendentesAtivos.length === 1) {
            responseToUser += `o(a) atendente *${atendentesAtivos[0].atendente}*`;
          } else {
            responseToUser += `os(as) atendentes ${atendentesAtivos.map(a => `*${a.atendente}*`).join(' e ')}`;
          }
          responseToUser += ` e ele(s) j√° est√°(√£o) ciente(s) da sua solicita√ß√£o. Em breve, ele(s) responder√°(√£o) aqui mesmo nesta conversa.`;

          await client.sendMessage(
            chatId,
            responseToUser
          );
        } else { // Caso n√£o encontre nenhum atendente no hor√°rio
          await client.sendMessage(
            chatId,
            "Estamos em hor√°rio de atendimento, mas n√£o encontrei um atendente de plant√£o na agenda. Por favor, aguarde que logo algu√©m da equipe ir√° lhe responder."
          );
        }
      } else { // Caso esteja fora do hor√°rio de atendimento
        await client.sendMessage(
          chatId,
          "Nosso atendimento humano funciona de segunda a sexta-feira, das 08:00 √†s 21:00. Por favor, entre em contato nesse per√≠odo."
        );
      }
      return;
    }

    usersData[chatId] = { opcao, step: 0, respostas: [] };
    await client.sendMessage(chatId, fluxos[opcao][0].pergunta);
    return;
  }

  await client.sendMessage(
    chatId,
    'Por favor, digite "menu" para ver as op√ß√µes dispon√≠veis.'
  );
}

module.exports = handleMessage;